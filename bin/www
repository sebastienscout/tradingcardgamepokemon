#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('OpenPokemon:server');
var http = require('http');
var core = require('../core');
var fs = require('fs');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var tabPokemon = ["42","33"];
var tabClient=[];
var nbClient = 0;
// PROBLEME DE RAFRAICHISSEMENT

var pokemon_cards = [];
var energy_cards = [];
var files = fs.readdirSync('../data/XY/Generations/');

files.forEach(function (file) {
  if (path.extname(file) === '.json') {
    console.log(file);
    pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/Generations/' + file, 'utf8')));
    pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/Generations/' + file, 'utf8')));
  }
});
/*for (var i = 0; i < 6; ++i) {
  energy_cards.push(new core.EnergyCard(core.EnergyType.PLANT));
  energy_cards.push(new core.EnergyCard(core.EnergyType.WATER));
} */

var deck1 = new core.Deck(pokemon_cards, energy_cards, []);
var deck2 = new core.Deck(pokemon_cards, energy_cards, []);
var player1 = new core.Player(deck1);
player1.selectInitialHand();
var player2 = new core.Player(deck2);
player2.selectInitialHand();
var board = new core.Board([player1, player2]);

io.sockets.on('connection', function (socket) {

    if (tabClient.length <= 2) {
      nbClient++;
      tabClient.push(socket);
      console.log("Nb Client "+nbClient);
      var fileCard = '../data/XY/XY/42.json';
      var cardJson = new core.Builder().createFromJSON(fs.readFileSync(fileCard, 'utf8'));
      var cardPokemon = new core.Pokemon(cardJson);
      socket.emit('card',cardPokemon.to_object());
    }

  socket.emit("bench",player1.bench());
  socket.emit("hand",player1.hand());
  console.log(player1.deckLengh());
  socket.emit("nbCarteDeck",player1.deckLengh());
  if (player1.activePokemon() != null) {
    socket.emit("pokemonActive", player1.activePokemon());
  }
  socket.on("toBench",function(id) {
    if(player1.bench().length < 5) {
      player1.addBench(id);
      player1.takeCardInHand(id);
      socket.emit("bench", player1.bench());
      socket.emit("hand", player1.hand());
    }

  });
  socket.on("toActive",function(id) {
    player1.benchToActive(id);
    socket.emit("bench", player1.bench());
    socket.emit("pokemonActive",player1.activePokemon());
  });
  socket.on('disconnect', function(){
    nbClient--;
    var i = tabClient.indexOf(socket);
    tabClient.splice(i, 1);
    console.log('Got disconnect!');
    console.log("Nb Client "+nbClient);
    socket.emit('carte');

  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
